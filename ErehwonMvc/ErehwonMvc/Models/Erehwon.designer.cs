#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ErehwonMvc.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Erehwon")]
	public partial class ErehwonDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertPurchase(Purchase instance);
    partial void UpdatePurchase(Purchase instance);
    partial void DeletePurchase(Purchase instance);
    partial void InsertPlotCategory(PlotCategory instance);
    partial void UpdatePlotCategory(PlotCategory instance);
    partial void DeletePlotCategory(PlotCategory instance);
    partial void InsertPlot(Plot instance);
    partial void UpdatePlot(Plot instance);
    partial void DeletePlot(Plot instance);
    #endregion
		
		public ErehwonDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ErehwonConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ErehwonDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ErehwonDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ErehwonDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ErehwonDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Purchase> Purchases
		{
			get
			{
				return this.GetTable<Purchase>();
			}
		}
		
		public System.Data.Linq.Table<PlotCategory> PlotCategories
		{
			get
			{
				return this.GetTable<PlotCategory>();
			}
		}
		
		public System.Data.Linq.Table<Plot> Plots
		{
			get
			{
				return this.GetTable<Plot>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private string _Email;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    #endregion
		
		public Client()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Order", Storage="_Orders", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private int _ClientID;
		
		private EntitySet<Purchase> _Purchases;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    #endregion
		
		public Order()
		{
			this._Purchases = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchases), new Action<Purchase>(this.detach_Purchases));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Purchase", Storage="_Purchases", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<Purchase> Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				this._Purchases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Order", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Purchase")]
	public partial class Purchase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PurchaseID;
		
		private int _PlotID;
		
		private int _OrderID;
		
		private double _AmountPaid;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Plot> _Plot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseIDChanging(int value);
    partial void OnPurchaseIDChanged();
    partial void OnPlotIDChanging(int value);
    partial void OnPlotIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnAmountPaidChanging(double value);
    partial void OnAmountPaidChanged();
    #endregion
		
		public Purchase()
		{
			this._Order = default(EntityRef<Order>);
			this._Plot = default(EntityRef<Plot>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PurchaseID
		{
			get
			{
				return this._PurchaseID;
			}
			set
			{
				if ((this._PurchaseID != value))
				{
					this.OnPurchaseIDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseID = value;
					this.SendPropertyChanged("PurchaseID");
					this.OnPurchaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlotID", DbType="Int NOT NULL")]
		public int PlotID
		{
			get
			{
				return this._PlotID;
			}
			set
			{
				if ((this._PlotID != value))
				{
					if (this._Plot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlotIDChanging(value);
					this.SendPropertyChanging();
					this._PlotID = value;
					this.SendPropertyChanged("PlotID");
					this.OnPlotIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPaid", DbType="Float NOT NULL")]
		public double AmountPaid
		{
			get
			{
				return this._AmountPaid;
			}
			set
			{
				if ((this._AmountPaid != value))
				{
					this.OnAmountPaidChanging(value);
					this.SendPropertyChanging();
					this._AmountPaid = value;
					this.SendPropertyChanged("AmountPaid");
					this.OnAmountPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Purchase", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Purchases.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Purchases.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plot_Purchase", Storage="_Plot", ThisKey="PlotID", OtherKey="PlotID", IsForeignKey=true)]
		public Plot Plot
		{
			get
			{
				return this._Plot.Entity;
			}
			set
			{
				Plot previousValue = this._Plot.Entity;
				if (((previousValue != value) 
							|| (this._Plot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Plot.Entity = null;
						previousValue.Purchases.Remove(this);
					}
					this._Plot.Entity = value;
					if ((value != null))
					{
						value.Purchases.Add(this);
						this._PlotID = value.PlotID;
					}
					else
					{
						this._PlotID = default(int);
					}
					this.SendPropertyChanged("Plot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlotCategory")]
	public partial class PlotCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlotCategoryID;
		
		private string _PlotCategoryName;
		
		private string _PlotCategoryDescription;
		
		private System.Nullable<double> _TotalHectares;
		
		private EntitySet<Plot> _Plots;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlotCategoryIDChanging(int value);
    partial void OnPlotCategoryIDChanged();
    partial void OnPlotCategoryNameChanging(string value);
    partial void OnPlotCategoryNameChanged();
    partial void OnPlotCategoryDescriptionChanging(string value);
    partial void OnPlotCategoryDescriptionChanged();
    partial void OnTotalHectaresChanging(System.Nullable<double> value);
    partial void OnTotalHectaresChanged();
    #endregion
		
		public PlotCategory()
		{
			this._Plots = new EntitySet<Plot>(new Action<Plot>(this.attach_Plots), new Action<Plot>(this.detach_Plots));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlotCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlotCategoryID
		{
			get
			{
				return this._PlotCategoryID;
			}
			set
			{
				if ((this._PlotCategoryID != value))
				{
					this.OnPlotCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._PlotCategoryID = value;
					this.SendPropertyChanged("PlotCategoryID");
					this.OnPlotCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlotCategoryName", DbType="VarChar(50)")]
		public string PlotCategoryName
		{
			get
			{
				return this._PlotCategoryName;
			}
			set
			{
				if ((this._PlotCategoryName != value))
				{
					this.OnPlotCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._PlotCategoryName = value;
					this.SendPropertyChanged("PlotCategoryName");
					this.OnPlotCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlotCategoryDescription", DbType="VarChar(150)")]
		public string PlotCategoryDescription
		{
			get
			{
				return this._PlotCategoryDescription;
			}
			set
			{
				if ((this._PlotCategoryDescription != value))
				{
					this.OnPlotCategoryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PlotCategoryDescription = value;
					this.SendPropertyChanged("PlotCategoryDescription");
					this.OnPlotCategoryDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalHectares", DbType="Float")]
		public System.Nullable<double> TotalHectares
		{
			get
			{
				return this._TotalHectares;
			}
			set
			{
				if ((this._TotalHectares != value))
				{
					this.OnTotalHectaresChanging(value);
					this.SendPropertyChanging();
					this._TotalHectares = value;
					this.SendPropertyChanged("TotalHectares");
					this.OnTotalHectaresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlotCategory_Plot", Storage="_Plots", ThisKey="PlotCategoryID", OtherKey="PlotCategoryID")]
		public EntitySet<Plot> Plots
		{
			get
			{
				return this._Plots;
			}
			set
			{
				this._Plots.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Plots(Plot entity)
		{
			this.SendPropertyChanging();
			entity.PlotCategory = this;
		}
		
		private void detach_Plots(Plot entity)
		{
			this.SendPropertyChanging();
			entity.PlotCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Plot")]
	public partial class Plot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlotID;
		
		private string _PlotName;
		
		private string _PlotDescription;
		
		private int _PlotCategoryID;
		
		private double _TotalHectares;
		
		private EntitySet<Purchase> _Purchases;
		
		private EntityRef<PlotCategory> _PlotCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlotIDChanging(int value);
    partial void OnPlotIDChanged();
    partial void OnPlotNameChanging(string value);
    partial void OnPlotNameChanged();
    partial void OnPlotDescriptionChanging(string value);
    partial void OnPlotDescriptionChanged();
    partial void OnPlotCategoryIDChanging(int value);
    partial void OnPlotCategoryIDChanged();
    partial void OnTotalHectaresChanging(double value);
    partial void OnTotalHectaresChanged();
    #endregion
		
		public Plot()
		{
			this._Purchases = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchases), new Action<Purchase>(this.detach_Purchases));
			this._PlotCategory = default(EntityRef<PlotCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlotID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlotID
		{
			get
			{
				return this._PlotID;
			}
			set
			{
				if ((this._PlotID != value))
				{
					this.OnPlotIDChanging(value);
					this.SendPropertyChanging();
					this._PlotID = value;
					this.SendPropertyChanged("PlotID");
					this.OnPlotIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlotName", DbType="VarChar(50)")]
		public string PlotName
		{
			get
			{
				return this._PlotName;
			}
			set
			{
				if ((this._PlotName != value))
				{
					this.OnPlotNameChanging(value);
					this.SendPropertyChanging();
					this._PlotName = value;
					this.SendPropertyChanged("PlotName");
					this.OnPlotNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlotDescription", DbType="VarChar(50)")]
		public string PlotDescription
		{
			get
			{
				return this._PlotDescription;
			}
			set
			{
				if ((this._PlotDescription != value))
				{
					this.OnPlotDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PlotDescription = value;
					this.SendPropertyChanged("PlotDescription");
					this.OnPlotDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlotCategoryID", DbType="Int NOT NULL")]
		public int PlotCategoryID
		{
			get
			{
				return this._PlotCategoryID;
			}
			set
			{
				if ((this._PlotCategoryID != value))
				{
					if (this._PlotCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlotCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._PlotCategoryID = value;
					this.SendPropertyChanged("PlotCategoryID");
					this.OnPlotCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalHectares", DbType="Float NOT NULL")]
		public double TotalHectares
		{
			get
			{
				return this._TotalHectares;
			}
			set
			{
				if ((this._TotalHectares != value))
				{
					this.OnTotalHectaresChanging(value);
					this.SendPropertyChanging();
					this._TotalHectares = value;
					this.SendPropertyChanged("TotalHectares");
					this.OnTotalHectaresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plot_Purchase", Storage="_Purchases", ThisKey="PlotID", OtherKey="PlotID")]
		public EntitySet<Purchase> Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				this._Purchases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlotCategory_Plot", Storage="_PlotCategory", ThisKey="PlotCategoryID", OtherKey="PlotCategoryID", IsForeignKey=true)]
		public PlotCategory PlotCategory
		{
			get
			{
				return this._PlotCategory.Entity;
			}
			set
			{
				PlotCategory previousValue = this._PlotCategory.Entity;
				if (((previousValue != value) 
							|| (this._PlotCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlotCategory.Entity = null;
						previousValue.Plots.Remove(this);
					}
					this._PlotCategory.Entity = value;
					if ((value != null))
					{
						value.Plots.Add(this);
						this._PlotCategoryID = value.PlotCategoryID;
					}
					else
					{
						this._PlotCategoryID = default(int);
					}
					this.SendPropertyChanged("PlotCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Plot = this;
		}
		
		private void detach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Plot = null;
		}
	}
}
#pragma warning restore 1591
